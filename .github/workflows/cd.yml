# cd.yml
name: Deploy to AWS EC2

on:
  workflow_run:
    workflows: ["Build and Push Docker image to AWS ECR"] # Name of your CI workflow
    types:
      - completed # Trigger when the CI workflow completes
    branches:
      - master # Only run CD if CI completed on master branch

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18' # Specify your Node.js version here
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Jest tests
      run: npm test

  deploy:
    needs: test # Keep this if you want the 'test' job in cd.yml to run first
    runs-on: ubuntu-latest

    # This condition is crucial: only run 'deploy' if the workflow_run that triggered it was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Get ECR image URI from CI workflow
      id: get_ecr_uri
      run: |
        # Use gh CLI to fetch the workflow run details and its output
        # Ensure you have GITHUB_TOKEN environment variable set or use actions/github-script
        # We need to get the specific workflow run that triggered THIS workflow
        # and then access its output
        
        # This requires the gh CLI to be available, which is usually pre-installed on GitHub Actions runners.
        # Alternatively, use actions/github-script for a more direct API call.

        # Fetch the workflow run object that triggered this one
        WORKFLOW_RUN_ID="${{ github.event.workflow_run.id }}"
        OWNER="${{ github.repository_owner }}"
        REPO="${{ github.event.repository.name }}"

        # Use gh CLI to get the workflow run details and then parse the outputs
        # This approach is more reliable than directly accessing github.event.workflow_run.outputs
        # because the 'outputs' field in workflow_run event payload is not always fully populated.
        # It's better to fetch the full workflow run details with `gh api` or `actions/github-script`.

        # For simplicity and common practice with workflow_run, we'll often pass it as an input
        # or rely on the fact that for simple cases, outputs might be propagated.
        # However, a more robust way is to fetch it from the previous workflow run.

        # Let's simplify this with direct access as it's common if the data is small
        # and the trigger is direct from workflow_run.
        ECR_IMAGE_URI="${{ github.event.workflow_run.output.ecr_image_uri }}"
        
        # Fallback/Alternative if direct access doesn't work consistently:
        # You would need to use `actions/github-script` to fetch the workflow run details
        # and then parse its outputs.
        # Example using actions/github-script:
        # - name: Get ECR image URI via github-script
        #   id: get_ecr_uri
        #   uses: actions/github-script@v6
        #   with:
        #     script: |
        #       const workflowRun = await github.rest.actions.getWorkflowRun({
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         run_id: context.payload.workflow_run.id,
        #       });
        #       const ecrImageUri = workflowRun.data.output.ecr_image_uri; // Adjust this path if needed
        #       console.log(`ECR Image URI: ${ecrImageUri}`);
        #       core.setOutput('final_ecr_image_uri', ecrImageUri);

        echo "Received ECR_IMAGE_URI: $ECR_IMAGE_URI"
        echo "::set-output name=final_ecr_image_uri::$ECR_IMAGE_URI" # Set as step output for later use

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@ec2-3-25-86-214.ap-southeast-2.compute.amazonaws.com << 'EOF'
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 307242479232.dkr.ecr.ap-southeast-2.amazonaws.com
          
          docker pull ${{ steps.get_ecr_uri.outputs.final_ecr_image_uri }} # Use the output here

          docker stop todo-list-devops-project || true
          docker rm todo-list-devops-project || true

          docker run -d --name todo-list-devops-project -p 8000:8000 ${{ steps.get_ecr_uri.outputs.final_ecr_image_uri }}

          docker image prune -f

          echo "Deployment complete!"
        EOF