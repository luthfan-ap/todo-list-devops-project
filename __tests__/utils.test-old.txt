// __tests__/utils.test.js

/**
 * @jest-environment jsdom
 */

require('../JS/utils.js');


describe('Utility Functions', () => {
  const mockLocalStorage = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    clear: jest.fn(),
  };

  // Mengganti `window.localStorage` dengan mock kita (ini sudah benar)
  Object.defineProperty(window, 'localStorage', {
    value: mockLocalStorage,
    writable: true
  });


  beforeEach(() => {
    // --- MOCK window.location DENGAN SPY PADA PROPERTI YANG ADA ---
    const mockLocation = {
        _href: 'http://localhost/',
        assign: jest.fn(url => { mockLocation._href = url; }),
        replace: jest.fn(url => { mockLocation._href = url; }),
        reload: jest.fn(),
        origin: 'http://localhost',
        pathname: '/',
        search: '',
        hash: '',
        toString: jest.fn(() => mockLocation._href),
    };
    Object.defineProperty(window, 'location', {
        configurable: true,
        get: jest.fn(() => mockLocation),
        set: jest.fn(newLocation => { Object.assign(mockLocation, newLocation); }),
    });


    // Mock global alert dan console
    jest.spyOn(window, 'alert').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'error').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'warn').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'log').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'info').mockImplementation(jest.fn());


    jest.clearAllMocks(); // Membersihkan semua mock dan spy

    // Membersihkan spy alert dan console
    window.alert.mockClear();
    window.console.error.mockClear();
    window.console.warn.mockClear();
    window.console.log.mockClear();
    window.console.info.mockClear();
    
    // Membersihkan spy window.location
    window.location.assign.mockClear();
    window.location.replace.mockClear();
    window.location.reload.mockClear();
    window.location.toString.mockClear();
    // Reset nilai href secara manual pada mock
    window.location.href = 'http://localhost/'; // Gunakan setter yang sudah di-spy
    
    mockLocalStorage.getItem.mockClear();
    mockLocalStorage.setItem.mockClear();
    mockLocalStorage.clear();

    // Reset DOM untuk test `changeTheme` (jika perlu)
    document.body.innerHTML = `
        <div id="title" class="title"></div>
        <input class="todo-input" />
        <input class="todo-date" />
        <button class="todo-btn"></button>
        <button class="check-btn"></button>
        <button class="delete-btn"></button>
        <button class="logout-btn"></button>
        <div class="todo" id="todo-completed-theme"></div>
        <div class="todo" id="todo-uncompleted-theme"></div>
    `;
    // Membuat mock ClassList untuk elemen yang diuji (dibuat di sini untuk setiap beforeEach)
    const createMockClassList = () => {
        let classes = new Set();
        return {
            add: jest.fn((...cls) => cls.forEach(c => classes.add(c))),
            remove: jest.fn((...cls) => cls.forEach(c => classes.delete(c))),
            contains: jest.fn((cls) => classes.has(cls)),
            toggle: jest.fn((cls) => {
                if (classes.has(cls)) {
                    classes.delete(cls);
                    return false;
                } else {
                    classes.add(cls);
                    return true;
                }
            }),
            get value() { return Array.from(classes).join(' '); },
            set value(val) {
                classes.clear();
                val.split(' ').filter(Boolean).forEach(c => classes.add(c));
            }
        };
    };

    const completedTodoDiv = document.getElementById('todo-completed-theme');
    completedTodoDiv.classList = createMockClassList();
    completedTodoDiv.classList.add('todo', 'completed');
    
    const uncompletedTodoDiv = document.getElementById('todo-uncompleted-theme');
    uncompletedTodoDiv.classList = createMockClassList();
    uncompletedTodoDiv.classList.add('todo');
  });

  afterEach(() => {
    jest.restoreAllMocks(); // Mengembalikan semua spy yang dibuat dengan jest.spyOn
  });


  describe('formatDate', () => {
    it('should format ISO date to Indonesian format', () => {
      const iso = '2024-05-01';
      const result = window.formatDate(iso);
      expect(result).toBe('01 Mei 2024');
    });

    it('should return empty string on null/undefined input', () => {
      expect(window.formatDate(null)).toBe('');
      expect(window.formatDate(undefined)).toBe('');
      expect(window.formatDate('')).toBe('');
    });
  });

  describe('changeTheme', () => {
    it('should set localStorage and update body class', () => {
      mockLocalStorage.getItem.mockReturnValueOnce('darker');
      mockLocalStorage.setItem.mockClear();

      window.changeTheme('darker');

      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('savedTheme', 'darker');
      expect(mockLocalStorage.getItem).toHaveBeenCalledWith('savedTheme');
      expect(document.body.className).toBe('darker');
      expect(document.getElementById('title').classList.contains('darker-title')).toBe(true);
    });

    it('should update button and input classes correctly', () => {
      mockLocalStorage.getItem.mockReturnValueOnce('light');
      mockLocalStorage.setItem.mockClear();

      window.changeTheme('light');
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('savedTheme', 'light');
      expect(document.querySelector('.todo-input').className).toContain('light-input');
      expect(document.querySelector('.todo-date').className).toContain('light-input');
      expect(document.querySelector('.check-btn').className).toContain('light-button');
      expect(document.querySelector('.delete-btn').className).toContain('light-button');
      expect(document.querySelector('.todo-btn').className).toContain('light-button');
      expect(document.querySelector('.logout-btn').className).toContain('light-button');
    });

    it('should handle completed todo class correctly', () => {
      mockLocalStorage.getItem.mockReturnValueOnce('standard');
      mockLocalStorage.setItem.mockClear();

      window.changeTheme('standard');
      const todos = document.querySelectorAll('.todo');
      
      expect(todos[0].classList.contains('todo')).toBe(true);
      expect(todos[0].classList.contains('standard-todo')).toBe(true);
      expect(todos[0].classList.contains('completed')).toBe(true);

      expect(todos[1].classList.contains('todo')).toBe(true);
      expect(todos[1].classList.contains('standard-todo')).toBe(true);
      expect(todos[1].classList.contains('completed')).toBe(false);
    });
  });
});