// __tests__/script.test.js

/**
 * @jest-environment jsdom
 */

// PENTING: Jalur ke folder mock yang BENAR adalah `../__mocks__/firebase`
jest.mock('../__mocks__/firebase');

// Import mock Firebase yang benar
const firebase = require('../__mocks__/firebase');

// Set `global.firebase` agar tersedia untuk `JS/auth.js` saat di-load oleh `require()`
global.firebase = firebase;

// --- PENTING: Muat JS/auth.js di sini agar fungsi `loginUser` dan `registerUser` tersedia di `window` ---
require('../JS/auth.js');


describe('Authentication Functions (Simplified)', () => {
  // Tidak perlu `originalWindowLocationDescriptor` lagi

  beforeEach(() => {
    // >>> CARA BARU UNTUK MOCK window.location <<<
    // Kita akan memata-matai seluruh objek window.location yang sudah ada.
    // Ini adalah cara yang paling sering berhasil karena menghindari `defineProperty` yang rewel.
    jest.spyOn(window, 'location', 'get').mockImplementation(() => ({
      href: 'http://localhost/', // Nilai default
      assign: jest.fn(),
      replace: jest.fn(),
      reload: jest.fn(),
      origin: 'http://localhost',
      pathname: '/',
      search: '',
      hash: '',
      toString: jest.fn(() => 'http://localhost/'),
    }));
    // Untuk mengubah href, kita akan memata-matai `assign` atau mengubah nilai di mock itu sendiri.

    // Jika kode Anda melakukan `window.location.href = "..."`, kita perlu memata-matai setter.
    // Ini adalah bagian paling sulit. Mari kita coba cara yang lebih langsung:
    // Buat objek mock location, lalu gunakan jest.spyOn pada properti `href` dari objek mock tersebut.
    const mockLocation = {
        _href: 'http://localhost/', // Properti internal untuk menyimpan nilai href
        assign: jest.fn(url => { mockLocation._href = url; }), // Ganti assign
        replace: jest.fn(url => { mockLocation._href = url; }),
        reload: jest.fn(),
        origin: 'http://localhost',
        pathname: '/',
        search: '',
        hash: '',
        toString: jest.fn(() => mockLocation._href),
    };
    // Sekarang, timpa properti `location` di `window` dengan getter/setter kustom
    Object.defineProperty(window, 'location', {
        configurable: true,
        get: jest.fn(() => mockLocation), // Getter untuk mengembalikan mockLocation
        set: jest.fn(newLocation => { Object.assign(mockLocation, newLocation); }), // Setter untuk menimpa properti
    });
    // >>> AKHIR CARA BARU UNTUK MOCK window.location <<<


    // Mock global alert dan console
    jest.spyOn(window, 'alert').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'error').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'warn').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'log').mockImplementation(jest.fn());
    jest.spyOn(window.console, 'info').mockImplementation(jest.fn());


    document.body.innerHTML = `
      <form id="loginForm">
        <input type="email" id="email" />
        <input type="password" id="password" />
        <button type="submit"></button>
      </form>
      <form id="registerForm">
        <input type="email" id="emailReg" />
        <input type="password" id="passwordReg" />
        <button type="submit"></button>
      </form>
    `;

    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const emailRegInput = document.getElementById('emailReg');
    const passwordRegInput = document.getElementById('passwordReg');

    emailInput.value = '';
    passwordInput.value = '';
    emailRegInput.value = '';
    passwordRegInput.value = '';

    jest.clearAllMocks(); // Membersihkan semua mock (termasuk mock Firebase)

    // Membersihkan spy pada `window.location` dan global console/alert
    // Sekarang kita punya mockLocation, kita bersihkan spy-nya
    window.location.assign.mockClear();
    window.location.replace.mockClear();
    window.location.reload.mockClear();
    window.location.toString.mockClear();

    window.alert.mockClear();
    window.console.error.mockClear();
    window.console.warn.mockClear();
    window.console.log.mockClear();
    window.console.info.mockClear();
  });

  afterEach(() => {
    jest.restoreAllMocks(); // Mengembalikan semua spy ke implementasi asli JSDOM
  });


  describe('loginUser', () => {
    it('should call signInWithEmailAndPassword with correct credentials on success', async () => {
      const email = 'test@example.com';
      const password = 'password123';

      firebase.auth().signInWithEmailAndPassword.mockResolvedValueOnce({ user: { uid: 'some-uid' } });

      await window.loginUser(email, password);

      expect(firebase.auth().signInWithEmailAndPassword).toHaveBeenCalledWith(email, password);
      // Kita cek nilai `_href` di mockLocation setelah assign/set
      expect(window.location.assign).toHaveBeenCalledWith('index.html'); // Jika code pakai .assign
      // ATAU, jika code pakai `window.location.href = "..."`:
      expect(window.location.href).toBe('index.html'); // Setelah setter terpanggil, nilai akan diubah
      expect(window.alert).not.toHaveBeenCalled();
      expect(window.console.error).not.toHaveBeenCalled();
    });

    it('should show alert and log error on login failure', async () => {
      const email = 'invalid@example.com';
      const password = 'wrongpass';
      const errorMessage = 'Firebase: User not found.';
      const error = new Error(errorMessage);

      firebase.auth().signInWithEmailAndPassword.mockRejectedValueOnce(error);

      await window.loginUser(email, password);

      expect(firebase.auth().signInWithEmailAndPassword).toHaveBeenCalledWith(email, password);
      expect(window.alert).toHaveBeenCalledWith('Login Gagal.');
      expect(window.console.error).toHaveBeenCalledWith('Login Error:', error);
      expect(window.location.assign).not.toHaveBeenCalled(); // assign tidak terpanggil
      expect(window.location.href).toBe('http://localhost/'); // nilai href tidak berubah
    });
  });

  describe('registerUser', () => {
    it('should call createUserWithEmailAndPassword with correct credentials on success', async () => {
      const email = 'newuser@example.com';
      const password = 'newpass123';

      firebase.auth().createUserWithEmailAndPassword.mockResolvedValueOnce({ user: { uid: 'new-uid' } });

      await window.registerUser(email, password);

      expect(firebase.auth().createUserWithEmailAndPassword).toHaveBeenCalledWith(email, password);
      expect(window.alert).toHaveBeenCalledWith('Registrasi berhasil! Silakan login.');
      expect(window.location.assign).toHaveBeenCalledWith('login.html');
      expect(window.console.error).not.toHaveBeenCalled();
    });

    it('should show alert and log error on registration failure', async () => {
      const email = 'existing@example.com';
      const password = 'anypassword';
      const errorMessage = 'Firebase: Email already in use.';
      const error = new Error(errorMessage);

      firebase.auth().createUserWithEmailAndPassword.mockRejectedValueOnce(error);

      await window.registerUser(email, password);

      expect(firebase.auth().createUserWithEmailAndPassword).toHaveBeenCalledWith(email, password);
      expect(window.alert).toHaveBeenCalledWith('Registrasi Gagal.');
      expect(window.console.error).toHaveBeenCalledWith('Registrasi Error:', error);
      expect(window.location.assign).not.toHaveBeenCalled();
      expect(window.location.href).toBe('http://localhost/');
    });
  });
});